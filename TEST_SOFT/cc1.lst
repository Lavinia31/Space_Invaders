
AVRASM ver. 2.1.30  D:\TEST_SOFT\cc1.asm Sun Jun 18 20:53:46 2023

D:\TEST_SOFT\cc1.asm(1422): warning: Register r3 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1423): warning: Register r2 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1424): warning: Register r5 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1425): warning: Register r4 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1426): warning: Register r7 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1427): warning: Register r6 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1428): warning: Register r9 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1429): warning: Register r8 already defined by the .DEF directive
D:\TEST_SOFT\cc1.asm(1430): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : No
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00e2 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 014e 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 011c 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0139 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _racheta:
00003e 0404
00003f 1504
000040 1f0e
000041 0000      	.DB  0x4,0x4,0x4,0x15,0xE,0x1F,0x0,0x0
000042 0000      	.DB  0x0,0x0
                 _monstru:
000043 0e15
000044 041f
000045 041f
000046 0404      	.DB  0x15,0xE,0x1F,0x4,0x1F,0x4,0x4,0x4
000047 0000      	.DB  0x0,0x0
                 _clear:
000048 0000
000049 0000
00004a 0000
00004b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004c 0000      	.DB  0x0,0x0
                 _b0:
00004d 0000
00004e 0000
00004f 0000
000050 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000051 0400      	.DB  0x0,0x4
                 _b1:
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0404      	.DB  0x4,0x4
                 _b2:
000057 0000
000058 0000
000059 0000
00005a 0400      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4
00005b 0004      	.DB  0x4,0x0
                 _b3:
00005c 0000
00005d 0000
00005e 0000
00005f 0404      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4
000060 0000      	.DB  0x0,0x0
                 _b4:
000061 0000
000062 0000
000063 0400
000064 0004      	.DB  0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0
000065 0000      	.DB  0x0,0x0
                 _b5:
000066 0000
000067 0000
000068 0404
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0
00006a 0000      	.DB  0x0,0x0
                 _b6:
00006b 0000
00006c 0400
00006d 0004
00006e 0000      	.DB  0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0
00006f 0000      	.DB  0x0,0x0
                 _b7:
000070 0000
000071 0404
000072 0000
000073 0000      	.DB  0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0
000074 0000      	.DB  0x0,0x0
                 _b8:
000075 0400
000076 0004
000077 0000
000078 0000      	.DB  0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0
000079 0000      	.DB  0x0,0x0
                 _b9:
00007a 0404
00007b 0000
00007c 0000
00007d 0000      	.DB  0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0
00007e 0000      	.DB  0x0,0x0
                 _b10:
00007f 0004
000080 0000
000081 0000
000082 0000      	.DB  0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000083 0000      	.DB  0x0,0x0
                 
                 _0x1B:
000084 009a
000085 00a4
000086 00ae
000087 00b8      	.DB  LOW(_b0*2),HIGH(_b0*2),LOW(_b1*2),HIGH(_b1*2),LOW(_b2*2),HIGH(_b2*2),LOW(_b3*2),HIGH(_b3*2)
000088 00c2
000089 00cc
00008a 00d6
00008b 00e0      	.DB  LOW(_b4*2),HIGH(_b4*2),LOW(_b5*2),HIGH(_b5*2),LOW(_b6*2),HIGH(_b6*2),LOW(_b7*2),HIGH(_b7*2)
00008c 00ea
00008d 00f4
00008e 00fe      	.DB  LOW(_b8*2),HIGH(_b8*2),LOW(_b9*2),HIGH(_b9*2),LOW(_b10*2),HIGH(_b10*2)
                 _0x1E:
00008f 0002
000090 0001
000091 0000
000092 0010      	.DB  0x2,0x0,0x1,0x0,0x0,0x0,0x10,0x0
000093 0000
000094 0000
000095 0000
000096 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000097 0000
000098 0000
000099 0000
00009a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009b 0000
00009c 0000
00009d 0000
00009e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009f 0000
0000a0 0000
0000a1 0000
0000a2 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a3 0000
0000a4 0000
0000a5 0000
0000a6 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a7 0000
0000a8 0000
0000a9 0000
0000aa 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ab 0000
0000ac 0000
0000ad 0000
0000ae 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000af 0000
0000b0 0000
0000b1 0000
0000b2 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b3 0000
0000b4 0003      	.DB  0x0,0x0,0x3,0x0
                 _0x0:
0000b5 5453
0000b6 5241
0000b7 2054
0000b8 4147      	.DB  0x53,0x54,0x41,0x52,0x54,0x20,0x47,0x41
0000b9 454d
0000ba 0021
0000bb 4147
0000bc 454d      	.DB  0x4D,0x45,0x21,0x0,0x47,0x41,0x4D,0x45
0000bd 4f20
0000be 4556
0000bf 2152
0000c0 4300      	.DB  0x20,0x4F,0x56,0x45,0x52,0x21,0x0,0x43
0000c1 6e6f
0000c2 7267
0000c3 7461
0000c4 6c75      	.DB  0x6F,0x6E,0x67,0x72,0x61,0x74,0x75,0x6C
0000c5 7461
0000c6 6f69
0000c7 736e
0000c8 5921      	.DB  0x61,0x74,0x69,0x6F,0x6E,0x73,0x21,0x59
0000c9 554f
0000ca 5227
0000cb 2045
0000cc 4854      	.DB  0x4F,0x55,0x27,0x52,0x45,0x20,0x54,0x48
0000cd 2045
0000ce 4542
0000cf 5453
0000d0 0021      	.DB  0x45,0x20,0x42,0x45,0x53,0x54,0x21,0x0
                 _0x2040060:
D:\TEST_SOFT\cc1.asm(1543): warning: .cseg .db misalignment - padding zero byte
0000d1 0001      	.DB  0x1
                 _0x2040000:
0000d2 4e2d
0000d3 4e41
0000d4 4900
0000d5 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\TEST_SOFT\cc1.asm(1546): warning: .cseg .db misalignment - padding zero byte
0000d6 0000      	.DB  0x0
                 _0x2060003:
0000d7 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000d8 0016      	.DW  0x16
0000d9 0210      	.DW  _vector
0000da 0108      	.DW  _0x1B*2
                 
0000db 0001      	.DW  0x01
0000dc 0226      	.DW  __seed_G102
0000dd 01a2      	.DW  _0x2040060*2
                 
0000de 0002      	.DW  0x02
0000df 022a      	.DW  __base_y_G103
0000e0 01ae      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
0000e1 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000e2 94f8      	CLI
0000e3 27ee      	CLR  R30
0000e4 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000e5 e0f1      	LDI  R31,1
0000e6 bff5      	OUT  MCUCR,R31
0000e7 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000e8 e1f8      	LDI  R31,0x18
0000e9 95a8      	WDR
0000ea b7a4      	IN   R26,MCUSR
0000eb 7fa7      	CBR  R26,8
0000ec bfa4      	OUT  MCUSR,R26
0000ed 93f0 0060 	STS  WDTCSR,R31
0000ef 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
0000f1 e08d      	LDI  R24,(14-2)+1
0000f2 e0a2      	LDI  R26,2
0000f3 27bb      	CLR  R27
                 __CLEAR_REG:
0000f4 93ed      	ST   X+,R30
0000f5 958a      	DEC  R24
0000f6 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000f7 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000f8 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000f9 e0a0      	LDI  R26,LOW(__SRAM_START)
0000fa e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000fb 93ed      	ST   X+,R30
0000fc 9701      	SBIW R24,1
0000fd f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000fe ebe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ff e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000100 9185      	LPM  R24,Z+
000101 9195      	LPM  R25,Z+
000102 9700      	SBIW R24,0
000103 f061      	BREQ __GLOBAL_INI_END
000104 91a5      	LPM  R26,Z+
000105 91b5      	LPM  R27,Z+
000106 9005      	LPM  R0,Z+
000107 9015      	LPM  R1,Z+
000108 01bf      	MOVW R22,R30
000109 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00010a 9005      	LPM  R0,Z+
00010b 920d      	ST   X+,R0
00010c 9701      	SBIW R24,1
00010d f7e1      	BRNE __GLOBAL_INI_LOOP
00010e 01fb      	MOVW R30,R22
00010f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000110 e0e0      	LDI  R30,__GPIOR0_INIT
000111 bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000112 bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000113 bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000114 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000115 bfed      	OUT  SPL,R30
000116 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000117 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000118 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000119 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00011a 940c 01b6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x01
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                         .equ __lcd_port = 0x15 ;PORTC
                 ; 0000 0016         #endasm
                 ;interrupt [21] void usart0_rx_isr(void)
                 ; 0000 0051 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
00011c d28a      	RCALL SUBOPT_0x0
                 ; 0000 0052 char status,data;
                 ; 0000 0053 status=UCSR0A;
00011d 931a      	ST   -Y,R17
00011e 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00011f 9110 00c0 	LDS  R17,192
                 ; 0000 0054 data=UDR0;
000121 9100 00c6 	LDS  R16,198
                 ; 0000 0055 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000123 2fe1      	MOV  R30,R17
000124 71ec      	ANDI R30,LOW(0x1C)
000125 f481      	BRNE _0x3
                 ; 0000 0056 {
                 ; 0000 0057 rx_buffer0[rx_wr_index0++]=data;
000126 2de3      	MOV  R30,R3
000127 9433      	INC  R3
000128 e0f0      	LDI  R31,0
000129 50e0      	SUBI R30,LOW(-_rx_buffer0)
00012a 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
00012b 8300      	ST   Z,R16
                 ; 0000 0058 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0059 // special case for receiver buffer size=256
                 ; 0000 005A if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 005B #else
                 ; 0000 005C if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
00012c e0e8      	LDI  R30,LOW(8)
00012d 15e3      	CP   R30,R3
00012e f409      	BRNE _0x4
00012f 2433      	CLR  R3
                 ; 0000 005D if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
000130 9453      	INC  R5
000131 e0e8      	LDI  R30,LOW(8)
000132 15e5      	CP   R30,R5
000133 f411      	BRNE _0x5
                 ; 0000 005E {
                 ; 0000 005F rx_counter0=0;
000134 2455      	CLR  R5
                 ; 0000 0060 rx_buffer_overflow0=1;
000135 9af0      	SBI  0x1E,0
                 ; 0000 0061 }
                 ; 0000 0062 #endif
                 ; 0000 0063 }
                 _0x5:
                 ; 0000 0064 }
                 _0x3:
000136 9109      	LD   R16,Y+
000137 9119      	LD   R17,Y+
000138 c010      	RJMP _0x68
                 ; .FEND
                 ;char getchar(void)
                 ; 0000 006B {
                 ; 0000 006C char data;
                 ; 0000 006D while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 006E data=rx_buffer0[rx_rd_index0++];
                 ; 0000 006F #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0070 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0071 #endif
                 ; 0000 0072 #asm("cli")
                 ; 0000 0073 --rx_counter0;
                 ; 0000 0074 #asm("sei")
                 ; 0000 0075 return data;
                 ; 0000 0076 }
                 ;interrupt [23] void usart0_tx_isr(void)
                 ; 0000 0086 {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
000139 d26d      	RCALL SUBOPT_0x0
                 ; 0000 0087 if (tx_counter0)
00013a 2066      	TST  R6
00013b f069      	BREQ _0xC
                 ; 0000 0088 {
                 ; 0000 0089 --tx_counter0;
00013c 946a      	DEC  R6
                 ; 0000 008A UDR0=tx_buffer0[tx_rd_index0++];
00013d 2de7      	MOV  R30,R7
00013e 9473      	INC  R7
00013f e0f0      	LDI  R31,0
000140 5fe8      	SUBI R30,LOW(-_tx_buffer0)
000141 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000142 81e0      	LD   R30,Z
000143 93e0 00c6 	STS  198,R30
                 ; 0000 008B #if TX_BUFFER_SIZE0 != 256
                 ; 0000 008C if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000145 e0e8      	LDI  R30,LOW(8)
000146 15e7      	CP   R30,R7
000147 f409      	BRNE _0xD
000148 2477      	CLR  R7
                 ; 0000 008D #endif
                 ; 0000 008E }
                 _0xD:
                 ; 0000 008F }
                 _0xC:
                 _0x68:
000149 91e9      	LD   R30,Y+
00014a bfef      	OUT  SREG,R30
00014b 91f9      	LD   R31,Y+
00014c 91e9      	LD   R30,Y+
00014d 9518      	RETI
                 ; .FEND
                 ;void putchar(char c)
                 ; 0000 0096 {
                 ; 0000 0097 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 ; 0000 0098 #asm("cli")
                 ; 0000 0099 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 009A {
                 ; 0000 009B tx_buffer0[tx_wr_index0++]=c;
                 ; 0000 009C #if TX_BUFFER_SIZE0 != 256
                 ; 0000 009D if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ; 0000 009E #endif
                 ; 0000 009F ++tx_counter0;
                 ; 0000 00A0 }
                 ; 0000 00A1 else
                 ; 0000 00A2 UDR0=c;
                 ; 0000 00A3 #asm("sei")
                 ; 0000 00A4 }
                 ;interrupt [14] void timer1_compa_isr(void)
                 ; 0000 00B1 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
                 ; 0000 00B2 //LED1 = ~LED1; // invert LED
                 ; 0000 00B3 }
00014e 9518      	RETI
                 ; .FEND
                 ;void define_char(byte flash *pc, byte char_code)
                 ; 0000 016D {
                 _define_char:
                 ; .FSTART _define_char
                 ; 0000 016E byte i, a;
                 ; 0000 016F a = (char_code<<3) | 0x40;
00014f 93aa      	ST   -Y,R26
000150 931a      	ST   -Y,R17
000151 930a      	ST   -Y,R16
                 ;	*pc -> Y+3
                 ;	char_code -> Y+2
                 ;	i -> R17
                 ;	a -> R16
000152 81ea      	LDD  R30,Y+2
000153 0fee      	LSL  R30
000154 0fee      	LSL  R30
000155 0fee      	LSL  R30
000156 64e0      	ORI  R30,0x40
000157 2f0e      	MOV  R16,R30
                 ; 0000 0170 for(i=0;i<10;i++) lcd_write_byte(a++, *pc++);
000158 e010      	LDI  R17,LOW(0)
                 _0x17:
000159 301a      	CPI  R17,10
00015a f460      	BRSH _0x18
00015b 930a      	ST   -Y,R16
00015c 9503      	INC  R16
00015d 81ec      	LDD  R30,Y+4
00015e 81fd      	LDD  R31,Y+4+1
00015f 9631      	ADIW R30,1
000160 83ec      	STD  Y+4,R30
000161 83fd      	STD  Y+4+1,R31
000162 9731      	SBIW R30,1
000163 91a4      	LPM  R26,Z
000164 d1d8      	RCALL _lcd_write_byte
000165 5f1f      	SUBI R17,-1
000166 cff2      	RJMP _0x17
                 _0x18:
                 ; 0000 0171 }
000167 8119      	LDD  R17,Y+1
000168 8108      	LDD  R16,Y+0
000169 9625      	ADIW R28,5
00016a 9508      	RET
                 ; .FEND
                 ;void right(int c){
                 ; 0000 0173 void right(int c){
                 _right:
                 ; .FSTART _right
                 ; 0000 0174 if(c<31){
00016b d240      	RCALL SUBOPT_0x1
                 ;	c -> Y+0
00016c 975f      	SBIW R26,31
00016d f434      	BRGE _0x19
                 ; 0000 0175 define_char(racheta,1);
00016e d242      	RCALL SUBOPT_0x2
                 ; 0000 0176 lcd_gotoxy(c+1,1);
00016f 5fef      	SUBI R30,-LOW(1)
000170 d248      	RCALL SUBOPT_0x3
                 ; 0000 0177 lcd_putchar(1);
                 ; 0000 0178 define_char(clear,2);
                 ; 0000 0179 lcd_gotoxy(c,1);
                 ; 0000 017A lcd_putchar(2);
                 ; 0000 017B delay_ms(150);
000171 e9a6      	LDI  R26,LOW(150)
000172 e0b0      	LDI  R27,0
000173 d335      	RCALL _delay_ms
                 ; 0000 017C 
                 ; 0000 017D }
                 ; 0000 017E }
                 _0x19:
000174 940c 034d 	JMP  _0x20C0002
                 ; .FEND
                 ;void left(int c){
                 ; 0000 0180 void left(int c){
                 _left:
                 ; .FSTART _left
                 ; 0000 0181 if(c>16){
000176 d235      	RCALL SUBOPT_0x1
                 ;	c -> Y+0
000177 9751      	SBIW R26,17
000178 f034      	BRLT _0x1A
                 ; 0000 0182 define_char(racheta,1);
000179 d237      	RCALL SUBOPT_0x2
                 ; 0000 0183 lcd_gotoxy(c-1,1);
00017a 50e1      	SUBI R30,LOW(1)
00017b d23d      	RCALL SUBOPT_0x3
                 ; 0000 0184 lcd_putchar(1);
                 ; 0000 0185 define_char(clear,2);
                 ; 0000 0186 lcd_gotoxy(c,1);
                 ; 0000 0187 lcd_putchar(2);
                 ; 0000 0188 delay_ms(250);
00017c efaa      	LDI  R26,LOW(250)
00017d e0b0      	LDI  R27,0
00017e d32a      	RCALL _delay_ms
                 ; 0000 0189 }
                 ; 0000 018A }
                 _0x1A:
00017f 940c 034d 	JMP  _0x20C0002
                 ; .FEND
                 
                 	.DSEG
                 ;void afisare(int b,int c, int r, int idx, int v){
                 ; 0000 018D void afisare(int b,int c, int r, int idx, int v){
                 
                 	.CSEG
                 _afisare:
                 ; .FSTART _afisare
                 ; 0000 018E if(v==2){
000181 d22a      	RCALL SUBOPT_0x1
                 ;	b -> Y+8
                 ;	c -> Y+6
                 ;	r -> Y+4
                 ;	idx -> Y+2
                 ;	v -> Y+0
000182 9712      	SBIW R26,2
000183 f4b9      	BRNE _0x1C
                 ; 0000 018F define_char(vector[b],3);
000184 d245      	RCALL SUBOPT_0x4
                 ; 0000 0190 define_char(vector[11-b],4);
000185 85a8      	LDD  R26,Y+8
000186 85b9      	LDD  R27,Y+8+1
000187 e0eb      	LDI  R30,LOW(11)
000188 e0f0      	LDI  R31,HIGH(11)
000189 1bea      	SUB  R30,R26
00018a 0bfb      	SBC  R31,R27
00018b e1a0      	LDI  R26,LOW(_vector)
00018c e0b2      	LDI  R27,HIGH(_vector)
00018d d24a      	RCALL SUBOPT_0x5
00018e 91ed      	LD   R30,X+
00018f 91fd      	LD   R31,X+
000190 93fa      	ST   -Y,R31
000191 93ea      	ST   -Y,R30
000192 e0a4      	LDI  R26,LOW(4)
000193 dfbb      	RCALL _define_char
                 ; 0000 0191 lcd_gotoxy(c,r);
000194 d248      	RCALL SUBOPT_0x6
                 ; 0000 0192 lcd_putchar(3);
                 ; 0000 0193 lcd_gotoxy(idx,r);
000195 81ea      	LDD  R30,Y+2
000196 93ea      	ST   -Y,R30
000197 81ad      	LDD  R26,Y+5
000198 d1a9      	RCALL _lcd_gotoxy
                 ; 0000 0194 lcd_putchar(4);
000199 e0a4      	LDI  R26,LOW(4)
00019a d248      	RCALL SUBOPT_0x7
                 ; 0000 0195 delay_ms(30);
                 ; 0000 0196 }
                 ; 0000 0197 if(v==0){
                 _0x1C:
00019b 81e8      	LD   R30,Y
00019c 81f9      	LDD  R31,Y+1
00019d 9730      	SBIW R30,0
00019e f429      	BRNE _0x1D
                 ; 0000 0198 define_char(vector[b],3);
00019f d22a      	RCALL SUBOPT_0x4
                 ; 0000 0199 lcd_gotoxy(c,r);
0001a0 d23c      	RCALL SUBOPT_0x6
                 ; 0000 019A lcd_putchar(3);
                 ; 0000 019B delay_ms(30);}
0001a1 e1ae      	LDI  R26,LOW(30)
0001a2 e0b0      	LDI  R27,0
0001a3 d305      	RCALL _delay_ms
                 ; 0000 019C }
                 _0x1D:
0001a4 962a      	ADIW R28,10
0001a5 9508      	RET
                 ; .FEND
                 ;void cl(int c, int r){
                 ; 0000 019D void cl(int c, int r){
                 _cl:
                 ; .FSTART _cl
                 ; 0000 019E define_char(clear,2);
0001a6 93ba      	ST   -Y,R27
0001a7 93aa      	ST   -Y,R26
                 ;	c -> Y+2
                 ;	r -> Y+0
0001a8 e9e0      	LDI  R30,LOW(_clear*2)
0001a9 e0f0      	LDI  R31,HIGH(_clear*2)
0001aa 93fa      	ST   -Y,R31
0001ab 93ea      	ST   -Y,R30
0001ac e0a2      	LDI  R26,LOW(2)
0001ad dfa1      	RCALL _define_char
                 ; 0000 019F lcd_gotoxy(c,r);
0001ae 81ea      	LDD  R30,Y+2
0001af 93ea      	ST   -Y,R30
0001b0 81a9      	LDD  R26,Y+1
0001b1 d190      	RCALL _lcd_gotoxy
                 ; 0000 01A0 lcd_putchar(2);
0001b2 e0a2      	LDI  R26,LOW(2)
0001b3 d22f      	RCALL SUBOPT_0x7
                 ; 0000 01A1 delay_ms(30);
                 ; 0000 01A2 }
0001b4 9624      	ADIW R28,4
0001b5 9508      	RET
                 ; .FEND
                 ;void main (void)
                 ; 0000 01A4 {   int col=23, rand=1;
                 _main:
                 ; .FSTART _main
                 ; 0000 01A5 int k,j;
                 ; 0000 01A6 int i=3;
                 ; 0000 01A7 int matr[2][16]={0};
                 ; 0000 01A8 int nr=0;
                 ; 0000 01A9 int index=16;
                 ; 0000 01AA int verif=0;
                 ; 0000 01AB int nr1=1;
                 ; 0000 01AC int nr2=2;
                 ; 0000 01AD 
                 ; 0000 01AE 
                 ; 0000 01AF LED1 = 0;
0001b6 97ef      	SBIW R28,63
0001b7 972f      	SBIW R28,15
0001b8 e48c      	LDI  R24,76
0001b9 e0a0      	LDI  R26,LOW(0)
0001ba e0b0      	LDI  R27,HIGH(0)
0001bb e1ee      	LDI  R30,LOW(_0x1E*2)
0001bc e0f1      	LDI  R31,HIGH(_0x1E*2)
0001bd d2b3      	RCALL __INITLOCB
                 ;	col -> R16,R17
                 ;	rand -> R18,R19
                 ;	k -> R20,R21
                 ;	j -> Y+76
                 ;	i -> Y+74
                 ;	matr -> Y+10
                 ;	nr -> Y+8
                 ;	index -> Y+6
                 ;	verif -> Y+4
                 ;	nr1 -> Y+2
                 ;	nr2 -> Y+0
                +
0001be e107     +LDI R16 , LOW ( 23 )
0001bf e010     +LDI R17 , HIGH ( 23 )
                 	__GETWRN 16,17,23
                +
0001c0 e021     +LDI R18 , LOW ( 1 )
0001c1 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
0001c2 985e      	CBI  0xB,6
                 ; 0000 01B0 lcd_init(416);
0001c3 eaa0      	LDI  R26,LOW(160)
0001c4 d1b8      	RCALL _lcd_init
                 ; 0000 01B1 lcd_gotoxy(0,0);
0001c5 d221      	RCALL SUBOPT_0x8
                 ; 0000 01B2 lcd_putsf("START GAME!");
                +
0001c6 e6aa     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001c7 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001c8 d1a1      	RCALL _lcd_putsf
                 ; 0000 01B3 delay_ms(3000);
0001c9 eba8      	LDI  R26,LOW(3000)
0001ca e0bb      	LDI  R27,HIGH(3000)
0001cb d2dd      	RCALL _delay_ms
                 ; 0000 01B4 lcd_init(416);
0001cc eaa0      	LDI  R26,LOW(160)
0001cd d1af      	RCALL _lcd_init
                 ; 0000 01B5 for(j=0;j<2;j++)
0001ce e0e0      	LDI  R30,LOW(0)
                +
0001cf 01de     +MOVW R26 , R28
0001d0 5ba4     +SUBI R26 , LOW ( - 76 )
0001d1 4fbf     +SBCI R27 , HIGH ( - 76 )
0001d2 93ed     +ST X + , R30
0001d3 93ec     +ST X , R30
                 	__CLRW1SX 76
                 _0x22:
                +
0001d4 01de     +MOVW R26 , R28
0001d5 5ba4     +SUBI R26 , LOW ( - 76 )
0001d6 4fbf     +SBCI R27 , HIGH ( - 76 )
0001d7 940e 04a3+CALL __GETW2X
                 	__GETW2SX 76
0001d9 9712      	SBIW R26,2
0001da f504      	BRGE _0x23
                 ; 0000 01B6 for(k=0;k<16;k++){
                +
0001db e040     +LDI R20 , LOW ( 0 )
0001dc e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x25:
                +
0001dd 3140     +CPI R20 , LOW ( 16 )
0001de e0e0     +LDI R30 , HIGH ( 16 )
0001df 075e     +CPC R21 , R30
                 	__CPWRN 20,21,16
0001e0 f48c      	BRGE _0x26
                 ; 0000 01B7 define_char(monstru,0);
0001e1 e8e6      	LDI  R30,LOW(_monstru*2)
0001e2 e0f0      	LDI  R31,HIGH(_monstru*2)
0001e3 93fa      	ST   -Y,R31
0001e4 93ea      	ST   -Y,R30
0001e5 e0a0      	LDI  R26,LOW(0)
0001e6 df68      	RCALL _define_char
                 ; 0000 01B8 lcd_gotoxy(k,j);
0001e7 934a      	ST   -Y,R20
                +
0001e8 01de     +MOVW R26 , R28
0001e9 5ba3     +SUBI R26 , LOW ( - 77 )
0001ea 4fbf     +SBCI R27 , HIGH ( - 77 )
0001eb 91ac     +LD R26 , X
                 	__GETB2SX 77
0001ec d155      	RCALL _lcd_gotoxy
                 ; 0000 01B9 lcd_putchar(0);
0001ed e0a0      	LDI  R26,LOW(0)
0001ee d16a      	RCALL _lcd_putchar
                 ; 0000 01BA }
                +
0001ef 5f4f     +SUBI R20 , LOW ( - 1 )
0001f0 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0001f1 cfeb      	RJMP _0x25
                 _0x26:
0001f2 01de      	MOVW R26,R28
0001f3 5ba4      	SUBI R26,LOW(-(76))
0001f4 4fbf      	SBCI R27,HIGH(-(76))
0001f5 91ed      	LD   R30,X+
0001f6 91fd      	LD   R31,X+
0001f7 9631      	ADIW R30,1
0001f8 93fe      	ST   -X,R31
0001f9 93ee      	ST   -X,R30
0001fa cfd9      	RJMP _0x22
                 _0x23:
                 ; 0000 01BB 
                 ; 0000 01BC define_char(racheta,1);
0001fb e7ec      	LDI  R30,LOW(_racheta*2)
0001fc e0f0      	LDI  R31,HIGH(_racheta*2)
0001fd 93fa      	ST   -Y,R31
0001fe 93ea      	ST   -Y,R30
0001ff e0a1      	LDI  R26,LOW(1)
000200 df4e      	RCALL _define_char
                 ; 0000 01BD lcd_gotoxy(col,rand);
000201 930a      	ST   -Y,R16
000202 2fa2      	MOV  R26,R18
000203 d13e      	RCALL _lcd_gotoxy
                 ; 0000 01BE lcd_putchar(1);
000204 e0a1      	LDI  R26,LOW(1)
000205 d153      	RCALL _lcd_putchar
                 ; 0000 01BF while(1){
                 _0x27:
                 ; 0000 01C0 if(RIGHT==0){
000206 9919      	SBIC 0x3,1
000207 c001      	RJMP _0x2A
                 ; 0000 01C1 right(col);
000208 d1e2      	RCALL SUBOPT_0x9
                 ; 0000 01C2 col++;
                 ; 0000 01C3 }
                 ; 0000 01C4 
                 ; 0000 01C5 if(LEFT==0){
                 _0x2A:
000209 9918      	SBIC 0x3,0
00020a c001      	RJMP _0x2B
                 ; 0000 01C6 left(col);
00020b d1e4      	RCALL SUBOPT_0xA
                 ; 0000 01C7 col--;
                 ; 0000 01C8 }
                 ; 0000 01C9 
                 ; 0000 01CA if(BULLET==0){
                 _0x2B:
00020c 991a      	SBIC 0x3,2
00020d c104      	RJMP _0x2C
                 ; 0000 01CB if(matr[1][col-16]==0){
00020e d1e6      	RCALL SUBOPT_0xB
00020f d1ea      	RCALL SUBOPT_0xC
000210 f009      	BREQ PC+2
000211 c06a      	RJMP _0x2D
                 ; 0000 01CC j=col;
000212 d1ec      	RCALL SUBOPT_0xD
                 ; 0000 01CD if(index%4==0&&matr[1][index-16]==0)
000213 d1f1      	RCALL SUBOPT_0xE
000214 f429      	BRNE _0x2F
000215 81ee      	LDD  R30,Y+6
000216 81ff      	LDD  R31,Y+6+1
000217 d1f4      	RCALL SUBOPT_0xF
000218 d1e1      	RCALL SUBOPT_0xC
000219 f009      	BREQ _0x30
                 _0x2F:
00021a c005      	RJMP _0x2E
                 _0x30:
                 ; 0000 01CE verif=nr2;
00021b 81e8      	LD   R30,Y
00021c 81f9      	LDD  R31,Y+1
00021d 83ec      	STD  Y+4,R30
00021e 83fd      	STD  Y+4+1,R31
                 ; 0000 01CF else
00021f c003      	RJMP _0x31
                 _0x2E:
                 ; 0000 01D0 verif=0;
000220 e0e0      	LDI  R30,LOW(0)
000221 83ec      	STD  Y+4,R30
000222 83ed      	STD  Y+4+1,R30
                 ; 0000 01D1 for (k = 0; k < 11; k++){
                 _0x31:
                +
000223 e040     +LDI R20 , LOW ( 0 )
000224 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x33:
                +
000225 304b     +CPI R20 , LOW ( 11 )
000226 e0e0     +LDI R30 , HIGH ( 11 )
000227 075e     +CPC R21 , R30
                 	__CPWRN 20,21,11
000228 f454      	BRGE _0x34
                 ; 0000 01D2 afisare(k,j, 0,index, verif);
000229 d1e6      	RCALL SUBOPT_0x10
                 ; 0000 01D3 if(RIGHT==0){
00022a 9919      	SBIC 0x3,1
00022b c001      	RJMP _0x35
                 ; 0000 01D4 right(col);
00022c d1be      	RCALL SUBOPT_0x9
                 ; 0000 01D5 col++;
                 ; 0000 01D6 }
                 ; 0000 01D7 
                 ; 0000 01D8 if(LEFT==0){
                 _0x35:
00022d 9918      	SBIC 0x3,0
00022e c001      	RJMP _0x36
                 ; 0000 01D9 left(col);
00022f d1c0      	RCALL SUBOPT_0xA
                 ; 0000 01DA col--;
                 ; 0000 01DB }
                 ; 0000 01DC }
                 _0x36:
                +
000230 5f4f     +SUBI R20 , LOW ( - 1 )
000231 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000232 cff2      	RJMP _0x33
                 _0x34:
                 ; 0000 01DD if(verif==2)
000233 81ac      	LDD  R26,Y+4
000234 81bd      	LDD  R27,Y+4+1
000235 9712      	SBIW R26,2
000236 f419      	BRNE _0x37
                 ; 0000 01DE cl(index,0);
000237 81ee      	LDD  R30,Y+6
000238 81ff      	LDD  R31,Y+6+1
000239 d1ea      	RCALL SUBOPT_0x11
                 ; 0000 01DF 
                 ; 0000 01E0 cl(j,0);
                 _0x37:
00023a d1ee      	RCALL SUBOPT_0x12
00023b d1e8      	RCALL SUBOPT_0x11
                 ; 0000 01E1 matr[1][j-16]=2;
00023c d1ec      	RCALL SUBOPT_0x12
00023d d1ce      	RCALL SUBOPT_0xF
00023e d1f0      	RCALL SUBOPT_0x13
                 ; 0000 01E2 nr++;
                 ; 0000 01E3 if(index==col&&verif==2){
00023f 81ae      	LDD  R26,Y+6
000240 81bf      	LDD  R27,Y+6+1
000241 170a      	CP   R16,R26
000242 071b      	CPC  R17,R27
000243 f421      	BRNE _0x39
000244 81ac      	LDD  R26,Y+4
000245 81bd      	LDD  R27,Y+4+1
000246 9712      	SBIW R26,2
000247 f009      	BREQ _0x3A
                 _0x39:
000248 c005      	RJMP _0x38
                 _0x3A:
                 ; 0000 01E4 lcd_init(416);
000249 d1ef      	RCALL SUBOPT_0x14
                 ; 0000 01E5 lcd_clear();
                 ; 0000 01E6 lcd_gotoxy(0,0);
                 ; 0000 01E7 lcd_putsf("GAME OVER!");
                +
00024a e7a6     +LDI R26 , LOW ( 2 * _0x0 + ( 12 ) )
00024b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW2FN _0x0,12
00024c d11d      	RCALL _lcd_putsf
                 ; 0000 01E8 }
                 ; 0000 01E9 else{
00024d c021      	RJMP _0x3B
                 _0x38:
                 ; 0000 01EA if(index%4==0&&verif==2){
00024e d1b6      	RCALL SUBOPT_0xE
00024f f421      	BRNE _0x3D
000250 81ac      	LDD  R26,Y+4
000251 81bd      	LDD  R27,Y+4+1
000252 9712      	SBIW R26,2
000253 f009      	BREQ _0x3E
                 _0x3D:
000254 c013      	RJMP _0x3C
                 _0x3E:
                 ; 0000 01EB cl(j-16,1);
000255 d1e7      	RCALL SUBOPT_0x15
                 ; 0000 01EC for (k = 10; k >=0; k--)
                +
000256 e04a     +LDI R20 , LOW ( 10 )
000257 e050     +LDI R21 , HIGH ( 10 )
                 	__GETWRN 20,21,10
                 _0x40:
000258 2355      	TST  R21
000259 f05a      	BRMI _0x41
                 ; 0000 01ED afisare(k,index, 1,index,0);
00025a 935a      	ST   -Y,R21
00025b 934a      	ST   -Y,R20
00025c 85e8      	LDD  R30,Y+8
00025d 85f9      	LDD  R31,Y+8+1
00025e d1e5      	RCALL SUBOPT_0x16
00025f e0a0      	LDI  R26,LOW(0)
000260 e0b0      	LDI  R27,0
000261 df1f      	RCALL _afisare
                +
000262 5041     +SUBI R20 , LOW ( 1 )
000263 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
000264 cff3      	RJMP _0x40
                 _0x41:
                 ; 0000 01EE cl(index,1);
000265 81ee      	LDD  R30,Y+6
000266 81ff      	LDD  R31,Y+6+1
000267 c002      	RJMP _0x66
                 ; 0000 01EF 
                 ; 0000 01F0 }
                 ; 0000 01F1 else cl(j-16,1);
                 _0x3C:
000268 d1c0      	RCALL SUBOPT_0x12
000269 9770      	SBIW R30,16
                 _0x66:
00026a 93fa      	ST   -Y,R31
00026b 93ea      	ST   -Y,R30
00026c e0a1      	LDI  R26,LOW(1)
00026d e0b0      	LDI  R27,0
00026e df37      	RCALL _cl
                 ; 0000 01F2 
                 ; 0000 01F3 
                 ; 0000 01F4 }
                 _0x3B:
                 ; 0000 01F5 
                 ; 0000 01F6 if(index>=32)
00026f 81ae      	LDD  R26,Y+6
000270 81bf      	LDD  R27,Y+6+1
000271 9790      	SBIW R26,32
000272 f01c      	BRLT _0x43
                 ; 0000 01F7 index=16;
000273 e1e0      	LDI  R30,LOW(16)
000274 e0f0      	LDI  R31,HIGH(16)
000275 c003      	RJMP _0x67
                 ; 0000 01F8 else
                 _0x43:
                 ; 0000 01F9 index=index+2; }
000276 81ee      	LDD  R30,Y+6
000277 81ff      	LDD  R31,Y+6+1
000278 9632      	ADIW R30,2
                 _0x67:
000279 83ee      	STD  Y+6,R30
00027a 83ff      	STD  Y+6+1,R31
                 ; 0000 01FA 
                 ; 0000 01FB else
00027b c091      	RJMP _0x45
                 _0x2D:
                 ; 0000 01FC if(matr[1][col-16]==2&&matr[0][col-16]==0){
00027c d178      	RCALL SUBOPT_0xB
                +
00027d 91ed     +LD R30 , X +
00027e 91fc     +LD R31 , X
00027f 9711     +SBIW R26 , 1
                 	__GETW1P
000280 9732      	SBIW R30,2
000281 f419      	BRNE _0x47
000282 d1cc      	RCALL SUBOPT_0x17
000283 d176      	RCALL SUBOPT_0xC
000284 f009      	BREQ _0x48
                 _0x47:
000285 c031      	RJMP _0x46
                 _0x48:
                 ; 0000 01FD verif=0;
000286 d1cd      	RCALL SUBOPT_0x18
                 ; 0000 01FE j=col;
                 ; 0000 01FF for (k = 0; k < 11; k++) {
                +
000287 e040     +LDI R20 , LOW ( 0 )
000288 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x4A:
                +
000289 304b     +CPI R20 , LOW ( 11 )
00028a e0e0     +LDI R30 , HIGH ( 11 )
00028b 075e     +CPC R21 , R30
                 	__CPWRN 20,21,11
00028c f454      	BRGE _0x4B
                 ; 0000 0200 afisare(k,j, 0,index,verif);
00028d d182      	RCALL SUBOPT_0x10
                 ; 0000 0201 if(RIGHT==0){
00028e 9919      	SBIC 0x3,1
00028f c001      	RJMP _0x4C
                 ; 0000 0202 right(col);
000290 d15a      	RCALL SUBOPT_0x9
                 ; 0000 0203 col++;
                 ; 0000 0204 }
                 ; 0000 0205 
                 ; 0000 0206 if(LEFT==0){
                 _0x4C:
000291 9918      	SBIC 0x3,0
000292 c001      	RJMP _0x4D
                 ; 0000 0207 left(col);
000293 d15c      	RCALL SUBOPT_0xA
                 ; 0000 0208 col--;
                 ; 0000 0209 }
                 ; 0000 020A }
                 _0x4D:
                +
000294 5f4f     +SUBI R20 , LOW ( - 1 )
000295 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000296 cff2      	RJMP _0x4A
                 _0x4B:
                 ; 0000 020B cl(j,0);
000297 d191      	RCALL SUBOPT_0x12
000298 d18b      	RCALL SUBOPT_0x11
                 ; 0000 020C 
                 ; 0000 020D for (k = 0; k < 11; k++) {
                +
000299 e040     +LDI R20 , LOW ( 0 )
00029a e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x4F:
                +
00029b 304b     +CPI R20 , LOW ( 11 )
00029c e0e0     +LDI R30 , HIGH ( 11 )
00029d 075e     +CPC R21 , R30
                 	__CPWRN 20,21,11
00029e f46c      	BRGE _0x50
                 ; 0000 020E afisare(k,j-16, 1,index,verif);
00029f d1b8      	RCALL SUBOPT_0x19
0002a0 85ac      	LDD  R26,Y+12
0002a1 85bd      	LDD  R27,Y+12+1
0002a2 dede      	RCALL _afisare
                 ; 0000 020F if(RIGHT==0){
0002a3 9919      	SBIC 0x3,1
0002a4 c001      	RJMP _0x51
                 ; 0000 0210 right(col);
0002a5 d145      	RCALL SUBOPT_0x9
                 ; 0000 0211 col++;
                 ; 0000 0212 }
                 ; 0000 0213 
                 ; 0000 0214 if(LEFT==0){
                 _0x51:
0002a6 9918      	SBIC 0x3,0
0002a7 c001      	RJMP _0x52
                 ; 0000 0215 left(col);
0002a8 d147      	RCALL SUBOPT_0xA
                 ; 0000 0216 col--;
                 ; 0000 0217 }
                 ; 0000 0218 }
                 _0x52:
                +
0002a9 5f4f     +SUBI R20 , LOW ( - 1 )
0002aa 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0002ab cfef      	RJMP _0x4F
                 _0x50:
                 ; 0000 0219 
                 ; 0000 021A cl(j-16,1);
0002ac d190      	RCALL SUBOPT_0x15
                 ; 0000 021B cl(j-16,0);
0002ad d17b      	RCALL SUBOPT_0x12
0002ae 9770      	SBIW R30,16
0002af d174      	RCALL SUBOPT_0x11
                 ; 0000 021C matr[0][j-16]=2;
0002b0 d178      	RCALL SUBOPT_0x12
0002b1 9770      	SBIW R30,16
0002b2 01de      	MOVW R26,R28
0002b3 961a      	ADIW R26,10
0002b4 d123      	RCALL SUBOPT_0x5
0002b5 d179      	RCALL SUBOPT_0x13
                 ; 0000 021D nr++;
                 ; 0000 021E 
                 ; 0000 021F 
                 ; 0000 0220 }
                 ; 0000 0221 else if(matr[0][col-16]==2){
0002b6 c056      	RJMP _0x53
                 _0x46:
0002b7 d197      	RCALL SUBOPT_0x17
0002b8 91ed      	LD   R30,X+
0002b9 91fd      	LD   R31,X+
0002ba 30e2      	CPI  R30,LOW(0x2)
0002bb e0a0      	LDI  R26,HIGH(0x2)
0002bc 07fa      	CPC  R31,R26
0002bd f009      	BREQ PC+2
0002be c04e      	RJMP _0x54
                 ; 0000 0222 verif=0;
0002bf d194      	RCALL SUBOPT_0x18
                 ; 0000 0223 j=col;
                 ; 0000 0224 for (k = 0; k < 11; k++) {
                +
0002c0 e040     +LDI R20 , LOW ( 0 )
0002c1 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x56:
                +
0002c2 304b     +CPI R20 , LOW ( 11 )
0002c3 e0e0     +LDI R30 , HIGH ( 11 )
0002c4 075e     +CPC R21 , R30
                 	__CPWRN 20,21,11
0002c5 f454      	BRGE _0x57
                 ; 0000 0225 afisare(k,j, 0,index, verif);
0002c6 d149      	RCALL SUBOPT_0x10
                 ; 0000 0226 if(RIGHT==0){
0002c7 9919      	SBIC 0x3,1
0002c8 c001      	RJMP _0x58
                 ; 0000 0227 right(col);
0002c9 d121      	RCALL SUBOPT_0x9
                 ; 0000 0228 col++;
                 ; 0000 0229 }
                 ; 0000 022A 
                 ; 0000 022B if(LEFT==0){
                 _0x58:
0002ca 9918      	SBIC 0x3,0
0002cb c001      	RJMP _0x59
                 ; 0000 022C left(col);
0002cc d123      	RCALL SUBOPT_0xA
                 ; 0000 022D col--;
                 ; 0000 022E }
                 ; 0000 022F }
                 _0x59:
                +
0002cd 5f4f     +SUBI R20 , LOW ( - 1 )
0002ce 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0002cf cff2      	RJMP _0x56
                 _0x57:
                 ; 0000 0230 cl(j,0);
0002d0 d158      	RCALL SUBOPT_0x12
0002d1 d152      	RCALL SUBOPT_0x11
                 ; 0000 0231 for (k = 0; k < 11; k++) {
                +
0002d2 e040     +LDI R20 , LOW ( 0 )
0002d3 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x5B:
                +
0002d4 304b     +CPI R20 , LOW ( 11 )
0002d5 e0e0     +LDI R30 , HIGH ( 11 )
0002d6 075e     +CPC R21 , R30
                 	__CPWRN 20,21,11
0002d7 f46c      	BRGE _0x5C
                 ; 0000 0232 afisare(k,j-16, 1, index, verif);
0002d8 d17f      	RCALL SUBOPT_0x19
0002d9 85ac      	LDD  R26,Y+12
0002da 85bd      	LDD  R27,Y+12+1
0002db dea5      	RCALL _afisare
                 ; 0000 0233 if(RIGHT==0){
0002dc 9919      	SBIC 0x3,1
0002dd c001      	RJMP _0x5D
                 ; 0000 0234 right(col);
0002de d10c      	RCALL SUBOPT_0x9
                 ; 0000 0235 col++;
                 ; 0000 0236 }
                 ; 0000 0237 
                 ; 0000 0238 if(LEFT==0){
                 _0x5D:
0002df 9918      	SBIC 0x3,0
0002e0 c001      	RJMP _0x5E
                 ; 0000 0239 left(col);
0002e1 d10e      	RCALL SUBOPT_0xA
                 ; 0000 023A col--;
                 ; 0000 023B }
                 ; 0000 023C }
                 _0x5E:
                +
0002e2 5f4f     +SUBI R20 , LOW ( - 1 )
0002e3 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0002e4 cfef      	RJMP _0x5B
                 _0x5C:
                 ; 0000 023D cl(j-16,1);
0002e5 d157      	RCALL SUBOPT_0x15
                 ; 0000 023E for (k = 0; k < 11; k++) {
                +
0002e6 e040     +LDI R20 , LOW ( 0 )
0002e7 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x60:
                +
0002e8 304b     +CPI R20 , LOW ( 11 )
0002e9 e0e0     +LDI R30 , HIGH ( 11 )
0002ea 075e     +CPC R21 , R30
                 	__CPWRN 20,21,11
0002eb f4f4      	BRGE _0x61
                 ; 0000 023F afisare(k,j-16, 0, index, verif);
0002ec 935a      	ST   -Y,R21
0002ed 934a      	ST   -Y,R20
                +
0002ee 01fe     +MOVW R30 , R28
0002ef 5be2     +SUBI R30 , LOW ( - 78 )
0002f0 4fff     +SBCI R31 , HIGH ( - 78 )
0002f1 940e 049d+CALL __GETW1Z
                 	__GETW1SX 78
0002f3 9770      	SBIW R30,16
0002f4 93fa      	ST   -Y,R31
0002f5 93ea      	ST   -Y,R30
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 e0f0      	LDI  R31,HIGH(0)
0002f8 93fa      	ST   -Y,R31
0002f9 93ea      	ST   -Y,R30
0002fa 85ec      	LDD  R30,Y+12
0002fb 85fd      	LDD  R31,Y+12+1
0002fc 93fa      	ST   -Y,R31
0002fd 93ea      	ST   -Y,R30
0002fe 85ac      	LDD  R26,Y+12
0002ff 85bd      	LDD  R27,Y+12+1
000300 de80      	RCALL _afisare
                 ; 0000 0240 if(RIGHT==0){
000301 9919      	SBIC 0x3,1
000302 c001      	RJMP _0x62
                 ; 0000 0241 right(col);
000303 d0e7      	RCALL SUBOPT_0x9
                 ; 0000 0242 col++;
                 ; 0000 0243 }
                 ; 0000 0244 
                 ; 0000 0245 if(LEFT==0){
                 _0x62:
000304 9918      	SBIC 0x3,0
000305 c001      	RJMP _0x63
                 ; 0000 0246 left(col);
000306 d0e9      	RCALL SUBOPT_0xA
                 ; 0000 0247 col--;
                 ; 0000 0248 }
                 ; 0000 0249 }
                 _0x63:
                +
000307 5f4f     +SUBI R20 , LOW ( - 1 )
000308 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000309 cfde      	RJMP _0x60
                 _0x61:
                 ; 0000 024A cl(j-16,0);
00030a d11e      	RCALL SUBOPT_0x12
00030b 9770      	SBIW R30,16
00030c d117      	RCALL SUBOPT_0x11
                 ; 0000 024B 
                 ; 0000 024C }
                 ; 0000 024D index=index+2;
                 _0x54:
                 _0x53:
                 _0x45:
00030d 81ee      	LDD  R30,Y+6
00030e 81ff      	LDD  R31,Y+6+1
00030f 9632      	ADIW R30,2
000310 83ee      	STD  Y+6,R30
000311 83ff      	STD  Y+6+1,R31
                 ; 0000 024E }
                 ; 0000 024F if(nr==32){
                 _0x2C:
000312 85a8      	LDD  R26,Y+8
000313 85b9      	LDD  R27,Y+8+1
000314 9790      	SBIW R26,32
000315 f421      	BRNE _0x64
                 ; 0000 0250 lcd_init(416);
000316 d122      	RCALL SUBOPT_0x14
                 ; 0000 0251 lcd_clear();
                 ; 0000 0252 lcd_gotoxy(0,0);
                 ; 0000 0253 lcd_putsf("Congratulations!YOU'RE THE BEST!");
                +
000317 e8a1     +LDI R26 , LOW ( 2 * _0x0 + ( 23 ) )
000318 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 23 ) )
                 	__POINTW2FN _0x0,23
000319 d050      	RCALL _lcd_putsf
                 ; 0000 0254 }
                 ; 0000 0255 }
                 _0x64:
00031a ceeb      	RJMP _0x27
                 ; 0000 0256 
                 ; 0000 0257 }
                 _0x65:
00031b cfff      	RJMP _0x65
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
                 ; 0001 000F CLKPR=0x00;
                 ; 0001 0010 #ifdef OPTIMIZE_SIZE
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 // Input/Output Ports initialization
                 ; 0001 0015 // Port A initialization
                 ; 0001 0016 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0017 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0018 PORTA=0x00;
                 ; 0001 0019 DDRA=0x00;
                 ; 0001 001A 
                 ; 0001 001B // Port B initialization
                 ; 0001 001C PORTB=0x00;
                 ; 0001 001D DDRB=0x00;
                 ; 0001 001E 
                 ; 0001 001F // Port C initialization
                 ; 0001 0020 PORTC=0x00;
                 ; 0001 0021 DDRC=0b11110000;
                 ; 0001 0022 
                 ; 0001 0023 // Port D initialization
                 ; 0001 0024 PORTD=0b00100000; // D.5 needs pull-up resistor
                 ; 0001 0025 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
                 ; 0001 0026 
                 ; 0001 0027 // Timer/Counter 0 initialization
                 ; 0001 0028 // Clock source: System Clock
                 ; 0001 0029 // Clock value: Timer 0 Stopped
                 ; 0001 002A // Mode: Normal top=FFh
                 ; 0001 002B // OC0 output: Disconnected
                 ; 0001 002C TCCR0A=0x00;
                 ; 0001 002D TCCR0B=0x00;
                 ; 0001 002E TCNT0=0x00;
                 ; 0001 002F OCR0A=0x00;
                 ; 0001 0030 OCR0B=0x00;
                 ; 0001 0031 
                 ; 0001 0032 // Timer/Counter 1 initialization
                 ; 0001 0033 // Clock source: System Clock
                 ; 0001 0034 // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 0035 // Mode: CTC top=OCR1A
                 ; 0001 0036 // OC1A output: Discon.
                 ; 0001 0037 // OC1B output: Discon.
                 ; 0001 0038 // Noise Canceler: Off
                 ; 0001 0039 // Input Capture on Falling Edge
                 ; 0001 003A // Timer 1 Overflow Interrupt: Off
                 ; 0001 003B // Input Capture Interrupt: Off
                 ; 0001 003C // Compare A Match Interrupt: On
                 ; 0001 003D // Compare B Match Interrupt: Off
                 ; 0001 003E 
                 ; 0001 003F TCCR1A=0x00;
                 ; 0001 0040 TCCR1B=0x0D;
                 ; 0001 0041 TCNT1H=0x00;
                 ; 0001 0042 TCNT1L=0x00;
                 ; 0001 0043 ICR1H=0x00;
                 ; 0001 0044 ICR1L=0x00;
                 ; 0001 0045 
                 ; 0001 0046 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 0047 // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 0048 OCR1AH=0x4C;
                 ; 0001 0049 OCR1AL=0x40;
                 ; 0001 004A 
                 ; 0001 004B OCR1BH=0x00;
                 ; 0001 004C OCR1BL=0x00;
                 ; 0001 004D 
                 ; 0001 004E // Timer/Counter 2 initialization
                 ; 0001 004F // Clock source: System Clock
                 ; 0001 0050 // Clock value: Timer2 Stopped
                 ; 0001 0051 // Mode: Normal top=0xFF
                 ; 0001 0052 // OC2A output: Disconnected
                 ; 0001 0053 // OC2B output: Disconnected
                 ; 0001 0054 ASSR=0x00;
                 ; 0001 0055 TCCR2A=0x00;
                 ; 0001 0056 TCCR2B=0x00;
                 ; 0001 0057 TCNT2=0x00;
                 ; 0001 0058 OCR2A=0x00;
                 ; 0001 0059 OCR2B=0x00;
                 ; 0001 005A 
                 ; 0001 005B // External Interrupt(s) initialization
                 ; 0001 005C // INT0: Off
                 ; 0001 005D // INT1: Off
                 ; 0001 005E // INT2: Off
                 ; 0001 005F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0061 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0063 EICRA=0x00;
                 ; 0001 0064 EIMSK=0x00;
                 ; 0001 0065 PCICR=0x00;
                 ; 0001 0066 
                 ; 0001 0067 // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 0068 TIMSK0=0x00;
                 ; 0001 0069 TIMSK1=0x02;
                 ; 0001 006A TIMSK2=0x00;
                 ; 0001 006B 
                 ; 0001 006C // USART0 initialization
                 ; 0001 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 006E // USART0 Receiver: On
                 ; 0001 006F // USART0 Transmitter: On
                 ; 0001 0070 // USART0 Mode: Asynchronous
                 ; 0001 0071 // USART0 Baud rate: 9600
                 ; 0001 0072 UCSR0A=0x00;
                 ; 0001 0073 UCSR0B=0xD8;
                 ; 0001 0074 UCSR0C=0x06;
                 ; 0001 0075 UBRR0H=0x00;
                 ; 0001 0076 UBRR0L=0x81;
                 ; 0001 0077 
                 ; 0001 0078 // USART1 initialization
                 ; 0001 0079 // USART1 disabled
                 ; 0001 007A UCSR1B=0x00;
                 ; 0001 007B 
                 ; 0001 007C 
                 ; 0001 007D // Analog Comparator initialization
                 ; 0001 007E // Analog Comparator: Off
                 ; 0001 007F // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0080 ACSR=0x80;
                 ; 0001 0081 ADCSRB=0x00;
                 ; 0001 0082 DIDR1=0x00;
                 ; 0001 0083 
                 ; 0001 0084 // Watchdog Timer initialization
                 ; 0001 0085 // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 0086 #pragma optsize-
                 ; 0001 0087 #asm("wdr")
                 ; 0001 0088 // Write 2 consecutive values to enable watchdog
                 ; 0001 0089 // this is NOT a mistake !
                 ; 0001 008A WDTCSR=0x18;
                 ; 0001 008B WDTCSR=0x08;
                 ; 0001 008C #ifdef OPTIMIZE_SIZE
                 ; 0001 008D #pragma optsize+
                 ; 0001 008E #endif
                 ; 0001 008F 
                 ; 0001 0090 }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
00031c 93aa      	ST   -Y,R26
00031d b1e8      	IN   R30,0x8
00031e 70ef      	ANDI R30,LOW(0xF)
00031f 2fae      	MOV  R26,R30
000320 81e8      	LD   R30,Y
000321 7fe0      	ANDI R30,LOW(0xF0)
000322 2bea      	OR   R30,R26
000323 b9e8      	OUT  0x8,R30
                +
000324 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000325 958a     +DEC R24
000326 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000327 9a42      	SBI  0x8,2
                +
000328 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000329 958a     +DEC R24
00032a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00032b 9842      	CBI  0x8,2
                +
00032c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00032d 958a     +DEC R24
00032e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00032f c075      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000330 93aa      	ST   -Y,R26
000331 81a8      	LD   R26,Y
000332 dfe9      	RCALL __lcd_write_nibble_G103
000333 81e8          ld    r30,y
000334 95e2          swap  r30
000335 83e8          st    y,r30
000336 81a8      	LD   R26,Y
000337 dfe4      	RCALL __lcd_write_nibble_G103
                +
000338 ef8a     +LDI R24 , LOW ( 250 )
000339 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00033a 9701     +SBIW R24 , 1
00033b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
00033c c068      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_write_byte:
                 ; .FSTART _lcd_write_byte
00033d 93aa      	ST   -Y,R26
00033e 81a9      	LDD  R26,Y+1
00033f dff0      	RCALL __lcd_write_data
000340 d120      	RCALL SUBOPT_0x1A
000341 c00b      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000342 93aa      	ST   -Y,R26
000343 81e8      	LD   R30,Y
000344 e0f0      	LDI  R31,0
000345 5de6      	SUBI R30,LOW(-__base_y_G103)
000346 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000347 81e0      	LD   R30,Z
000348 81a9      	LDD  R26,Y+1
000349 0fae      	ADD  R26,R30
00034a dfe5      	RCALL __lcd_write_data
00034b 8099      	LDD  R9,Y+1
00034c 8088      	LDD  R8,Y+0
                 _0x20C0002:
00034d 9622      	ADIW R28,2
00034e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00034f e0a2      	LDI  R26,LOW(2)
000350 d115      	RCALL SUBOPT_0x1B
000351 e0ac      	LDI  R26,LOW(12)
000352 dfdd      	RCALL __lcd_write_data
000353 e0a1      	LDI  R26,LOW(1)
000354 d111      	RCALL SUBOPT_0x1B
000355 e0e0      	LDI  R30,LOW(0)
000356 2e8e      	MOV  R8,R30
000357 2e9e      	MOV  R9,R30
000358 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000359 93aa      	ST   -Y,R26
00035a 81a8      	LD   R26,Y
00035b 30aa      	CPI  R26,LOW(0xA)
00035c f011      	BREQ _0x2060005
00035d 149b      	CP   R9,R11
00035e f040      	BRLO _0x2060004
                 _0x2060005:
00035f e0e0      	LDI  R30,LOW(0)
000360 93ea      	ST   -Y,R30
000361 9483      	INC  R8
000362 2da8      	MOV  R26,R8
000363 dfde      	RCALL _lcd_gotoxy
000364 81a8      	LD   R26,Y
000365 30aa      	CPI  R26,LOW(0xA)
000366 f1f1      	BREQ _0x20C0001
                 _0x2060004:
000367 9493      	INC  R9
000368 d0f8      	RCALL SUBOPT_0x1A
000369 c03b      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00036a 93ba      	ST   -Y,R27
00036b 93aa      	ST   -Y,R26
00036c 931a      	ST   -Y,R17
                 _0x206000B:
00036d 81e9      	LDD  R30,Y+1
00036e 81fa      	LDD  R31,Y+1+1
00036f 9631      	ADIW R30,1
000370 83e9      	STD  Y+1,R30
000371 83fa      	STD  Y+1+1,R31
000372 9731      	SBIW R30,1
000373 91e4      	LPM  R30,Z
000374 2f1e      	MOV  R17,R30
000375 30e0      	CPI  R30,0
000376 f019      	BREQ _0x206000D
000377 2fa1      	MOV  R26,R17
000378 dfe0      	RCALL _lcd_putchar
000379 cff3      	RJMP _0x206000B
                 _0x206000D:
00037a 8118      	LDD  R17,Y+0
00037b 9623      	ADIW R28,3
00037c 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00037d 93aa      	ST   -Y,R26
00037e b1e7      	IN   R30,0x7
00037f 6fe0      	ORI  R30,LOW(0xF0)
000380 b9e7      	OUT  0x7,R30
000381 9a3a      	SBI  0x7,2
000382 9a38      	SBI  0x7,0
000383 9a39      	SBI  0x7,1
000384 9842      	CBI  0x8,2
000385 9840      	CBI  0x8,0
000386 9841      	CBI  0x8,1
000387 80b8      	LDD  R11,Y+0
000388 81e8      	LD   R30,Y
000389 58e0      	SUBI R30,-LOW(128)
                +
00038a 93e0 022c+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
00038c 81e8      	LD   R30,Y
00038d 54e0      	SUBI R30,-LOW(192)
                +
00038e 93e0 022d+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000390 e1a4      	LDI  R26,LOW(20)
000391 e0b0      	LDI  R27,0
000392 d116      	RCALL _delay_ms
000393 d0d6      	RCALL SUBOPT_0x1C
000394 d0d5      	RCALL SUBOPT_0x1C
000395 d0d4      	RCALL SUBOPT_0x1C
000396 e2a0      	LDI  R26,LOW(32)
000397 df84      	RCALL __lcd_write_nibble_G103
                +
000398 ef84     +LDI R24 , LOW ( 500 )
000399 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
00039a 9701     +SBIW R24 , 1
00039b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
00039c e2a8      	LDI  R26,LOW(40)
00039d df92      	RCALL __lcd_write_data
00039e e0a4      	LDI  R26,LOW(4)
00039f df90      	RCALL __lcd_write_data
0003a0 e8a5      	LDI  R26,LOW(133)
0003a1 df8e      	RCALL __lcd_write_data
0003a2 e0a6      	LDI  R26,LOW(6)
0003a3 df8c      	RCALL __lcd_write_data
0003a4 dfaa      	RCALL _lcd_clear
                 _0x20C0001:
0003a5 9621      	ADIW R28,1
0003a6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000200           	.BYTE 0x8
                 _tx_buffer0:
000208           	.BYTE 0x8
                 _vector:
000210           	.BYTE 0x16
                 __seed_G102:
000226           	.BYTE 0x4
                 __base_y_G103:
00022a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003a7 93ea      	ST   -Y,R30
0003a8 93fa      	ST   -Y,R31
0003a9 b7ef      	IN   R30,SREG
0003aa 93ea      	ST   -Y,R30
0003ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
0003ac 93ba      	ST   -Y,R27
0003ad 93aa      	ST   -Y,R26
0003ae 81a8      	LD   R26,Y
0003af 81b9      	LDD  R27,Y+1
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0003b1 e7ec      	LDI  R30,LOW(_racheta*2)
0003b2 e0f0      	LDI  R31,HIGH(_racheta*2)
0003b3 93fa      	ST   -Y,R31
0003b4 93ea      	ST   -Y,R30
0003b5 e0a1      	LDI  R26,LOW(1)
0003b6 dd98      	RCALL _define_char
0003b7 81e8      	LD   R30,Y
0003b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x3:
0003b9 93ea      	ST   -Y,R30
0003ba e0a1      	LDI  R26,LOW(1)
0003bb df86      	RCALL _lcd_gotoxy
0003bc e0a1      	LDI  R26,LOW(1)
0003bd df9b      	RCALL _lcd_putchar
0003be e9e0      	LDI  R30,LOW(_clear*2)
0003bf e0f0      	LDI  R31,HIGH(_clear*2)
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
0003c2 e0a2      	LDI  R26,LOW(2)
0003c3 dd8b      	RCALL _define_char
0003c4 81e8      	LD   R30,Y
0003c5 93ea      	ST   -Y,R30
0003c6 e0a1      	LDI  R26,LOW(1)
0003c7 df7a      	RCALL _lcd_gotoxy
0003c8 e0a2      	LDI  R26,LOW(2)
0003c9 cf8f      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4:
0003ca 85e8      	LDD  R30,Y+8
0003cb 85f9      	LDD  R31,Y+8+1
0003cc e1a0      	LDI  R26,LOW(_vector)
0003cd e0b2      	LDI  R27,HIGH(_vector)
0003ce 0fee      	LSL  R30
0003cf 1fff      	ROL  R31
0003d0 0fae      	ADD  R26,R30
0003d1 1fbf      	ADC  R27,R31
0003d2 91ed      	LD   R30,X+
0003d3 91fd      	LD   R31,X+
0003d4 93fa      	ST   -Y,R31
0003d5 93ea      	ST   -Y,R30
0003d6 e0a3      	LDI  R26,LOW(3)
0003d7 cd77      	RJMP _define_char
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x5:
0003d8 0fee      	LSL  R30
0003d9 1fff      	ROL  R31
0003da 0fae      	ADD  R26,R30
0003db 1fbf      	ADC  R27,R31
0003dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003dd 81ee      	LDD  R30,Y+6
0003de 93ea      	ST   -Y,R30
0003df 81ad      	LDD  R26,Y+5
0003e0 df61      	RCALL _lcd_gotoxy
0003e1 e0a3      	LDI  R26,LOW(3)
0003e2 cf76      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003e3 df75      	RCALL _lcd_putchar
0003e4 e1ae      	LDI  R26,LOW(30)
0003e5 e0b0      	LDI  R27,0
0003e6 c0c2      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0003e7 e0e0      	LDI  R30,LOW(0)
0003e8 93ea      	ST   -Y,R30
0003e9 e0a0      	LDI  R26,LOW(0)
0003ea cf57      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x9:
0003eb 01d8      	MOVW R26,R16
0003ec dd7e      	RCALL _right
                +
0003ed 5f0f     +SUBI R16 , LOW ( - 1 )
0003ee 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xA:
0003f0 01d8      	MOVW R26,R16
0003f1 dd84      	RCALL _left
                +
0003f2 5001     +SUBI R16 , LOW ( 1 )
0003f3 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0003f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0003f5 01f8      	MOVW R30,R16
0003f6 9770      	SBIW R30,16
0003f7 01de      	MOVW R26,R28
0003f8 969a      	ADIW R26,42
0003f9 cfde      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
                +
0003fa 91ed     +LD R30 , X +
0003fb 91fc     +LD R31 , X
0003fc 9711     +SBIW R26 , 1
                 	__GETW1P
0003fd 9730      	SBIW R30,0
0003fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xD:
                +
0003ff 01fe     +MOVW R30 , R28
000400 5be4     +SUBI R30 , LOW ( - 76 )
000401 4fff     +SBCI R31 , HIGH ( - 76 )
000402 9301     +ST Z + , R16
000403 8310     +ST Z , R17
                 	__PUTWSRX 16,17,76
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
000405 81ae      	LDD  R26,Y+6
000406 81bf      	LDD  R27,Y+6+1
000407 e0e4      	LDI  R30,LOW(4)
000408 e0f0      	LDI  R31,HIGH(4)
000409 d085      	RCALL __MODW21
00040a 9730      	SBIW R30,0
00040b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00040c 9770      	SBIW R30,16
00040d 01de      	MOVW R26,R28
00040e 969a      	ADIW R26,42
00040f cfc8      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:36 WORDS
                 SUBOPT_0x10:
000410 935a      	ST   -Y,R21
000411 934a      	ST   -Y,R20
                +
000412 01fe     +MOVW R30 , R28
000413 5be2     +SUBI R30 , LOW ( - 78 )
000414 4fff     +SBCI R31 , HIGH ( - 78 )
000415 940e 049d+CALL __GETW1Z
                 	__GETW1SX 78
000417 93fa      	ST   -Y,R31
000418 93ea      	ST   -Y,R30
000419 e0e0      	LDI  R30,LOW(0)
00041a e0f0      	LDI  R31,HIGH(0)
00041b 93fa      	ST   -Y,R31
00041c 93ea      	ST   -Y,R30
00041d 85ec      	LDD  R30,Y+12
00041e 85fd      	LDD  R31,Y+12+1
00041f 93fa      	ST   -Y,R31
000420 93ea      	ST   -Y,R30
000421 85ac      	LDD  R26,Y+12
000422 85bd      	LDD  R27,Y+12+1
000423 cd5d      	RJMP _afisare
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x11:
000424 93fa      	ST   -Y,R31
000425 93ea      	ST   -Y,R30
000426 e0a0      	LDI  R26,LOW(0)
000427 e0b0      	LDI  R27,0
000428 cd7d      	RJMP _cl
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:38 WORDS
                 SUBOPT_0x12:
                +
000429 01fe     +MOVW R30 , R28
00042a 5be4     +SUBI R30 , LOW ( - 76 )
00042b 4fff     +SBCI R31 , HIGH ( - 76 )
00042c 940e 049d+CALL __GETW1Z
                 	__GETW1SX 76
00042e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
00042f e0e2      	LDI  R30,LOW(2)
000430 e0f0      	LDI  R31,HIGH(2)
000431 93ed      	ST   X+,R30
000432 93fc      	ST   X,R31
000433 85e8      	LDD  R30,Y+8
000434 85f9      	LDD  R31,Y+8+1
000435 9631      	ADIW R30,1
000436 87e8      	STD  Y+8,R30
000437 87f9      	STD  Y+8+1,R31
000438 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000439 eaa0      	LDI  R26,LOW(160)
00043a df42      	RCALL _lcd_init
00043b df13      	RCALL _lcd_clear
00043c cfaa      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x15:
00043d dfeb      	RCALL SUBOPT_0x12
00043e 9770      	SBIW R30,16
00043f 93fa      	ST   -Y,R31
000440 93ea      	ST   -Y,R30
000441 e0a1      	LDI  R26,LOW(1)
000442 e0b0      	LDI  R27,0
000443 cd62      	RJMP _cl
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x16:
000444 93fa      	ST   -Y,R31
000445 93ea      	ST   -Y,R30
000446 e0e1      	LDI  R30,LOW(1)
000447 e0f0      	LDI  R31,HIGH(1)
000448 93fa      	ST   -Y,R31
000449 93ea      	ST   -Y,R30
00044a 85ec      	LDD  R30,Y+12
00044b 85fd      	LDD  R31,Y+12+1
00044c 93fa      	ST   -Y,R31
00044d 93ea      	ST   -Y,R30
00044e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
00044f 01f8      	MOVW R30,R16
000450 9770      	SBIW R30,16
000451 01de      	MOVW R26,R28
000452 961a      	ADIW R26,10
000453 cf84      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000454 e0e0      	LDI  R30,LOW(0)
000455 83ec      	STD  Y+4,R30
000456 83ed      	STD  Y+4+1,R30
000457 cfa7      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x19:
000458 935a      	ST   -Y,R21
000459 934a      	ST   -Y,R20
                +
00045a 01fe     +MOVW R30 , R28
00045b 5be2     +SUBI R30 , LOW ( - 78 )
00045c 4fff     +SBCI R31 , HIGH ( - 78 )
00045d 940e 049d+CALL __GETW1Z
                 	__GETW1SX 78
00045f 9770      	SBIW R30,16
000460 cfe3      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000461 9a40      	SBI  0x8,0
000462 81a8      	LD   R26,Y
000463 decc      	RCALL __lcd_write_data
000464 9840      	CBI  0x8,0
000465 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000466 dec9      	RCALL __lcd_write_data
000467 e0a3      	LDI  R26,LOW(3)
000468 e0b0      	LDI  R27,0
000469 c03f      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1C:
00046a e3a0      	LDI  R26,LOW(48)
00046b deb0      	RCALL __lcd_write_nibble_G103
                +
00046c ef84     +LDI R24 , LOW ( 500 )
00046d e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
00046e 9701     +SBIW R24 , 1
00046f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
000470 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __INITLOCB:
                 __INITLOCW:
000471 0fac      	ADD  R26,R28
000472 1fbd      	ADC  R27,R29
                 __INITLOC0:
000473 9005      	LPM  R0,Z+
000474 920d      	ST   X+,R0
000475 958a      	DEC  R24
000476 f7e1      	BRNE __INITLOC0
000477 9508      	RET
                 
                 __ANEGW1:
000478 95f1      	NEG  R31
000479 95e1      	NEG  R30
00047a 40f0      	SBCI R31,0
00047b 9508      	RET
                 
                 __DIVW21U:
00047c 2400      	CLR  R0
00047d 2411      	CLR  R1
00047e e190      	LDI  R25,16
                 __DIVW21U1:
00047f 0faa      	LSL  R26
000480 1fbb      	ROL  R27
000481 1c00      	ROL  R0
000482 1c11      	ROL  R1
000483 1a0e      	SUB  R0,R30
000484 0a1f      	SBC  R1,R31
000485 f418      	BRCC __DIVW21U2
000486 0e0e      	ADD  R0,R30
000487 1e1f      	ADC  R1,R31
000488 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000489 60a1      	SBR  R26,1
                 __DIVW21U3:
00048a 959a      	DEC  R25
00048b f799      	BRNE __DIVW21U1
00048c 01fd      	MOVW R30,R26
00048d 01d0      	MOVW R26,R0
00048e 9508      	RET
                 
                 __MODW21:
00048f 94e8      	CLT
000490 ffb7      	SBRS R27,7
000491 c004      	RJMP __MODW211
000492 95b1      	NEG  R27
000493 95a1      	NEG  R26
000494 40b0      	SBCI R27,0
000495 9468      	SET
                 __MODW211:
000496 fdf7      	SBRC R31,7
000497 dfe0      	RCALL __ANEGW1
000498 dfe3      	RCALL __DIVW21U
000499 01fd      	MOVW R30,R26
00049a f40e      	BRTC __MODW212
00049b dfdc      	RCALL __ANEGW1
                 __MODW212:
00049c 9508      	RET
                 
                 __GETW1Z:
00049d 920f      	PUSH R0
00049e 9001      	LD   R0,Z+
00049f 81f0      	LD   R31,Z
0004a0 2de0      	MOV  R30,R0
0004a1 900f      	POP  R0
0004a2 9508      	RET
                 
                 __GETW2X:
0004a3 920f      	PUSH R0
0004a4 900d      	LD   R0,X+
0004a5 91bc      	LD   R27,X
0004a6 2da0      	MOV  R26,R0
0004a7 900f      	POP  R0
0004a8 9508      	RET
                 
                 _delay_ms:
0004a9 9610      	adiw r26,0
0004aa f039      	breq __delay_ms1
                 __delay_ms0:
0004ab 95a8      	wdr
                +
0004ac e888     +LDI R24 , LOW ( 0x1388 )
0004ad e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
0004ae 9701     +SBIW R24 , 1
0004af f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
0004b0 9711      	sbiw r26,1
0004b1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004b2 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  19 r1 :   5 r2 :   0 r3 :   4 r4 :   0 r5 :   3 r6 :   2 r7 :   4 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  19 r17:  18 r18:   2 r19:   1 r20:  28 r21:  28 r22:   2 r23:   0 
r24:  23 r25:   8 r26: 140 r27:  50 r28:  23 r29:   2 r30: 219 r31:  91 
x  :  25 y  : 182 z  :  17 
Registers used: 27 out of 35 (77.1%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :  17 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  12 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   2 brmi  :   1 brne  :  25 brpl  :   0 brsh  :   1 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   5 
cbi   :   6 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   9 cpi   :  12 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   6 jmp   :  34 ld    :  39 ldd   :  68 ldi   : 158 
lds   :   2 lpm   :  12 lsl   :   6 lsr   :   0 mov   :  13 movw  :  23 
mul   :   0 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  12 pop   :   2 push  :   2 rcall : 139 ret   :  28 
reti  :   2 rjmp  :  63 rol   :   5 ror   :   0 sbc   :   2 sbci  :  24 
sbi   :   6 sbic  :  15 sbis  :   0 sbiw  :  37 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  91 std   :  16 sts   :   5 sub   :   2 subi  :  27 swap  :   1 
tst   :   2 wdr   :   2 
Instructions used: 62 out of 116 (53.4%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000966   2078    328   2406   16384  14.7%
[.dseg] 0x000100 0x00022e      0     46     46    1024   4.5%
[.eseg] 0x000000 0x000001      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
